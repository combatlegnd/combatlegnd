-- Initialisation des paramètres par défaut
local SilentAimSettings = {
    Enabled = true,
    ToggleKey = "Q",
    TeamCheck = false,
    VisibleCheck = false,
    TargetPart = "HumanoidRootPart",
    FOVRadius = 180,
    FOVVisible = true,
    HitChance = 100
}

-- Création de la fenêtre GUI
local Window = Library:CreateWindow("Silent Aim")
local MainTab = Window:CreateTab("Main")

-- Section pour les paramètres principaux
local MainSection = MainTab:CreateSection("Main Settings")

-- Toggle pour activer/désactiver le silent aim
MainSection:AddToggle("Enabled", SilentAimSettings.Enabled, function(value)
    SilentAimSettings.Enabled = value
end)

-- Toggle pour afficher/masquer le cercle de FOV
MainSection:AddToggle("Show FOV Circle", SilentAimSettings.FOVVisible, function(value)
    SilentAimSettings.FOVVisible = value
end)

-- Slider pour le rayon du cercle de FOV
MainSection:AddSlider("FOV Radius", 0, SilentAimSettings.FOVRadius, 360, 1, function(value)
    SilentAimSettings.FOVRadius = value
end)

-- Slider pour le pourcentage de chance de toucher
MainSection:AddSlider("Hit Chance", 0, SilentAimSettings.HitChance, 100, 1, function(value)
    SilentAimSettings.HitChance = value
end)

-- Fonction pour dessiner le cercle de FOV
local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 1
FOVCircle.NumSides = 100
FOVCircle.Radius = SilentAimSettings.FOVRadius
FOVCircle.Filled = false
FOVCircle.Visible = SilentAimSettings.FOVVisible
FOVCircle.ZIndex = 999
FOVCircle.Transparency = 1
FOVCircle.Color = Color3.fromRGB(54, 57, 241)

-- Boucle principale
while true do
    -- Mettre à jour la position et la taille du cercle de FOV
    FOVCircle.Position = Vector2.new(Mouse.X, Mouse.Y)
    FOVCircle.Radius = SilentAimSettings.FOVRadius

    -- Vérifier si le joueur cible est dans le cercle de FOV et s'il a une chance de toucher
    local TargetPlayer = GetClosestPlayerToMouse()
    if TargetPlayer and SilentAimSettings.Enabled and CalculateChance(SilentAimSettings.HitChance) then
        local TargetPosition = TargetPlayer.Character[SilentAimSettings.TargetPart].Position
        local RaycastParams = RaycastParams.new()
        RaycastParams.FilterDescendantsInstances = {TargetPlayer.Character}
        local RaycastResult = workspace:Raycast(Camera.CFrame.Position, (TargetPosition - Camera.CFrame.Position), RaycastParams)
        if not RaycastResult then
            -- Viser le joueur cible
            Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, TargetPosition)
        end
    end

    -- Mettre à jour l'affichage du cercle de FOV
    FOVCircle.Visible = SilentAimSettings.FOVVisible

    -- Attendre la prochaine frame
    wait()
end

-- Fonction pour trouver le joueur le plus proche de la souris
function GetClosestPlayerToMouse()
    local ClosestPlayer = nil
    local ClosestDistance = math.huge

    for _, Player in pairs(game.Players:GetPlayers()) do
        if Player ~= game.Players.LocalPlayer and Player.Character and Player.Character:FindFirstChild(SilentAimSettings.TargetPart) then
            local TargetPosition = Player.Character[SilentAimSettings.TargetPart].Position
            local Distance = (Camera.CFrame.Position - TargetPosition).Magnitude
            if Distance < ClosestDistance and (not SilentAimSettings.TeamCheck or Player.Team ~= game.Players.LocalPlayer.Team) then
                ClosestPlayer = Player
                ClosestDistance = Distance
            end
        end
    end

    return ClosestPlayer
end

-- Fonction pour calculer la chance de toucher
function CalculateChance(Percentage)
    return math.random() < Percentage / 100
end
